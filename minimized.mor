type List {
  Nil,
  Cons(List_, Array Int),
}

type List_ {
  Wrap(List)
}

pub lam_next_28(l0: List_): () =
  let Wrap(l1) = l0 in
  dispatch_38(l1)

pub lam_chain_lazy_30(l0: List_): List_ =
  Wrap(Cons(l0, ([])))

pub dispatch_38(l0: List): () =
  match l0 {
    Nil -> lam_next_28(lam_chain_lazy_30((Wrap(Nil)))),
    Cons(l2, l3) -> lam_next_28(l2),
  }

pub proc main(): () =
  let x = lam_next_28(Wrap(Nil)) in ()