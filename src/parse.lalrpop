use crate::data::raw_ast as syntax;
use crate::data::purity::Purity;
use crate::lex;

grammar;

// Lexer Integration

extern {
  type Location = usize;
  type Error = lex::Error;

  enum lex::Token {
    "UpperName" => lex::Token::UpperName(<String>),
    "LowerName" => lex::Token::LowerName(<String>),
    "FloatLit" => lex::Token::FloatLit(<f64>),
    "ByteLit" => lex::Token::ByteLit(<u8>),
    "IntLit" => lex::Token::IntLit(<i64>),
    "StringLit" => lex::Token::StringLit(<String>),

    "type" => lex::Token::Type,
    "match" => lex::Token::Match,
    "let" => lex::Token::Let,
    "in" => lex::Token::In,
    "proc" => lex::Token::Proc,
    "do" => lex::Token::Do,
    "then" => lex::Token::Then,

    "(" => lex::Token::LParen,
    ")" => lex::Token::RParen,
    "[" => lex::Token::LSquare,
    "]" => lex::Token::RSquare,
    "{" => lex::Token::LCurly,
    "}" => lex::Token::RCurly,

    "," => lex::Token::Comma,
    ":" => lex::Token::Colon,
    "=" => lex::Token::Equal,
    "->" => lex::Token::Arrow,
    "\\" => lex::Token::BackSlash,
    "_" => lex::Token::Underscore,

    "+&" => lex::Token::AddAmp,
    "-&" => lex::Token::SubAmp,
    "*&" => lex::Token::MulAmp,
    "/&" => lex::Token::DivAmp,
    "=&" => lex::Token::EqualAmp,
    "<&" => lex::Token::LtAmp,
    "<=&" => lex::Token::LteAmp,
    ">&" => lex::Token::GtAmp,
    ">=&" => lex::Token::GteAmp,
    "+" => lex::Token::Add,
    "-" => lex::Token::Sub,
    "*" => lex::Token::Mul,
    "/" => lex::Token::Div,
    "<" => lex::Token::Lt,
    "<=" => lex::Token::Lte,
    ">" => lex::Token::Gt,
    ">=" => lex::Token::Gte,
    "+." => lex::Token::AddDot,
    "-." => lex::Token::SubDot,
    "*." => lex::Token::MulDot,
    "/." => lex::Token::DivDot,
    "=." => lex::Token::EqualDot,
    "<." => lex::Token::LtDot,
    "<=." => lex::Token::LteDot,
    ">." => lex::Token::GtDot,
    ">=." => lex::Token::GteDot,

    "++" => lex::Token::PlusPlus,
  }
}

// Macros

CommaSep<T>: Vec<T> = {
  <items: (<T> ",")*> <last: T?> => match last {
    None => items,
    Some(item) => {
      let mut result = items;
      result.push(item);
      result
    }
  }
};

// Names and Strings

TypeName: syntax::TypeName = {
  <"UpperName"> => syntax::TypeName(<>),
};

CtorName: syntax::CtorName = {
  <"UpperName"> => syntax::CtorName(<>),
};

TypeParam: syntax::TypeParam = {
  <"LowerName"> => syntax::TypeParam(<>),
};

ValName: syntax::ValName = {
  <"LowerName"> => syntax::ValName(<>),
};

#[inline]
OptProc: Purity = {
  "proc" => Purity::Impure,
  () => Purity::Pure,
};

// Top-Level Items

pub Program: syntax::Program = {
  <Item*> => syntax::Program(<>),
};

Item: syntax::Item = {
  <TypeDef>,
  <ValDef>,
};

TypeDef: syntax::Item = {
  "type" <name: TypeName> <params: TypeParam*>
    "{" <cases: CommaSep<TypeCase>> "}" =>
      syntax::Item::TypeDef(name, params, cases),
};

TypeCase: (syntax::CtorName, Option<syntax::Type>) = {
  <name: CtorName> <content: ("(" <Types> ")")?> => (name, content),
};

ValDef: syntax::Item = {
  <purity: OptProc>
  <name: ValName>
  "(" <args: CommaSep<(<ValName> ":" <Type>)>> ")"
  ":" <ret_type: Type>
  "=" <body: Expr> => {
    let (arg_pat, arg_type) = if args.len() == 1 {
      let (arg_name, arg_type) = args.into_iter().next().unwrap();
      (syntax::Pattern::Var(arg_name), arg_type)
    } else {
      let mut pat_items = Vec::new();
      let mut type_items = Vec::new();

      for (pat_item, type_item) in args {
        pat_items.push(syntax::Pattern::Var(pat_item));
        type_items.push(type_item);
      }

      (syntax::Pattern::Tuple(pat_items), syntax::Type::Tuple(type_items))
    };

    let def_type = syntax::Type::Func(purity, Box::new(arg_type), Box::new(ret_type));
    let def_body = syntax::Expr::Lam(purity, arg_pat, Box::new(body));

    syntax::Item::ValDef(name, def_type, def_body)
  },

  <name: ValName> ":" <def_type: Type> "=" <val: Expr> => {
    syntax::Item::ValDef(name, def_type, val)
  },
};

// Types

AtomicType: syntax::Type = {
  "(" <Types> ")",
  <TypeParam> => syntax::Type::Var(<>),
  <TypeName> => syntax::Type::App(<>, Vec::new()),
};

AppType: syntax::Type = {
  <AtomicType>,
  <name: TypeName> <args: AtomicType+> => syntax::Type::App(name, args),
};

FuncType: syntax::Type = {
  <AppType>,
  <purity: OptProc> <arg: AppType> "->" <ret: FuncType> =>
    syntax::Type::Func(purity, Box::new(arg), Box::new(ret)),
};

Type: syntax::Type = {
  <FuncType>,
};

Types: syntax::Type = {
  <types: CommaSep<Type>> => {
    if types.len() == 1 {
      types.into_iter().next().unwrap()
    } else {
      syntax::Type::Tuple(types)
    }
  },
};

// Expressions

AtomicExpr: syntax::Expr = {
  "(" <Exprs> ")",

  <ValName> => syntax::Expr::Var(<>),

  <CtorName> => syntax::Expr::Ctor(<>),

  "[" <CommaSep<Expr>> "]" => syntax::Expr::ArrayLit(<>),

  <"IntLit"> => syntax::Expr::IntLit(<>),

  <"ByteLit"> => syntax::Expr::ByteLit(<>),

  <"FloatLit"> => syntax::Expr::FloatLit(<>),

  <"StringLit"> => syntax::Expr::TextLit(<>),

  <MatchExpr>,
};

MatchExpr: syntax::Expr = {
  "match" <expr: Expr> "{" <cases: CommaSep<(<Pattern> "->" <Expr>)>> "}" =>
    syntax::Expr::Match(Box::new(expr), cases),
};

AppExpr: syntax::Expr = {
  <AtomicExpr>,

  <func: AppExpr> "(" <args: Exprs> ")" =>
    syntax::Expr::App(Purity::Pure, Box::new(func), Box::new(args)),
};

ArithSumExpr: syntax::Expr = {
  <AppExpr>,

  <left: ArithSumExpr> "+&" <right: AppExpr> => syntax::binop(syntax::Op::AddByte, left, right),
  <left: ArithSumExpr> "-&" <right: AppExpr> => syntax::binop(syntax::Op::SubByte, left, right),

  <left: ArithSumExpr> "+" <right: AppExpr> => syntax::binop(syntax::Op::AddInt, left, right),
  <left: ArithSumExpr> "-" <right: AppExpr> => syntax::binop(syntax::Op::SubInt, left, right),

  <left: ArithSumExpr> "+." <right: AppExpr> => syntax::binop(syntax::Op::AddFloat, left, right),
  <left: ArithSumExpr> "-." <right: AppExpr> => syntax::binop(syntax::Op::SubFloat, left, right),
};

ArithProdExpr: syntax::Expr = {
  <ArithSumExpr>,

  <left: ArithProdExpr> "*&" <right: ArithSumExpr> => syntax::binop(syntax::Op::MulByte, left, right),
  <left: ArithProdExpr> "/&" <right: ArithSumExpr> => syntax::binop(syntax::Op::SubByte, left, right),

  <left: ArithProdExpr> "*" <right: ArithSumExpr> => syntax::binop(syntax::Op::MulInt, left, right),
  <left: ArithProdExpr> "/" <right: ArithSumExpr> => syntax::binop(syntax::Op::SubInt, left, right),

  <left: ArithProdExpr> "*." <right: ArithSumExpr> => syntax::binop(syntax::Op::MulFloat, left, right),
  <left: ArithProdExpr> "/." <right: ArithSumExpr> => syntax::binop(syntax::Op::DivFloat, left, right),
};

ArithCompExpr: syntax::Expr = {
  <ArithProdExpr>,

  <left: ArithProdExpr> "=&" <right: ArithProdExpr> => syntax::binop(syntax::Op::EqByte, left, right),
  <left: ArithProdExpr> "<&" <right: ArithProdExpr> => syntax::binop(syntax::Op::LtByte, left, right),
  <left: ArithProdExpr> "<=&" <right: ArithProdExpr> => syntax::binop(syntax::Op::LteByte, left, right),
  <left: ArithProdExpr> ">&" <right: ArithProdExpr> => syntax::binop(syntax::Op::LtByte, right, left),
  <left: ArithProdExpr> ">=&" <right: ArithProdExpr> => syntax::binop(syntax::Op::LteByte, right, left),

  <left: ArithProdExpr> "=" <right: ArithProdExpr> => syntax::binop(syntax::Op::EqInt, left, right),
  <left: ArithProdExpr> "<" <right: ArithProdExpr> => syntax::binop(syntax::Op::LtInt, left, right),
  <left: ArithProdExpr> "<=" <right: ArithProdExpr> => syntax::binop(syntax::Op::LteInt, left, right),
  <left: ArithProdExpr> ">" <right: ArithProdExpr> => syntax::binop(syntax::Op::LtInt, right, left),
  <left: ArithProdExpr> ">=" <right: ArithProdExpr> => syntax::binop(syntax::Op::LteInt, right, left),

  <left: ArithProdExpr> "=." <right: ArithProdExpr> => syntax::binop(syntax::Op::EqFloat, left, right),
  <left: ArithProdExpr> "<." <right: ArithProdExpr> => syntax::binop(syntax::Op::LtFloat, left, right),
  <left: ArithProdExpr> "<=." <right: ArithProdExpr> => syntax::binop(syntax::Op::LteFloat, left, right),
  <left: ArithProdExpr> ">." <right: ArithProdExpr> => syntax::binop(syntax::Op::LtFloat, right, left),
  <left: ArithProdExpr> ">=." <right: ArithProdExpr> => syntax::binop(syntax::Op::LteFloat, right, left),
};

ArrayExpr: syntax::Expr = {
  <AtomicExpr>,

  <left: ArrayExpr> "++" <right: AtomicExpr> =>
  syntax::Expr::App(Purity::Pure,
                    Box::new(syntax::Expr::Var(syntax::ValName("concat".to_string()))),
                    Box::new(syntax::Expr::Tuple(vec![left, right]))),
}

BlockExpr: syntax::Expr = {
  <ArithCompExpr>,

  <purity: OptProc> "\\" <param: Pattern> "->" <body: BlockExpr> =>
    syntax::Expr::Lam(purity, param, Box::new(body)),

  "let" <lhs: Pattern> "=" <rhs: Expr> "in" <body: BlockExpr> =>
    syntax::Expr::Let(lhs, Box::new(rhs), Box::new(body)),

  "do" <func: AppExpr> "(" <arg: Exprs> ")" <rest: ("then" <BlockExpr>)?> => {
    let app = syntax::Expr::App(Purity::Impure, Box::new(func), Box::new(arg));

    match rest {
      Some(rest) => syntax::Expr::Let(syntax::Pattern::Any, Box::new(app), Box::new(rest)),
      None => app,
    }
  }
};

Expr: syntax::Expr = {
  <BlockExpr>,
};

Exprs: syntax::Expr = {
  <exprs: CommaSep<Expr>> => {
    if exprs.len() == 1 {
      exprs.into_iter().next().unwrap()
    } else {
      syntax::Expr::Tuple(exprs)
    }
  },
};

// Patterns

Pattern: syntax::Pattern = {
  "(" <Patterns> ")",

  "_" => syntax::Pattern::Any,

  <ValName> => syntax::Pattern::Var(<>),

  <CtorName> => syntax::Pattern::Ctor(<>, None),

  <ctor: CtorName> "(" <args: Patterns> ")" => syntax::Pattern::Ctor(ctor, Some(Box::new(args))),

  <"IntLit"> => syntax::Pattern::IntConst(<>),

  <"ByteLit"> => syntax::Pattern::ByteConst(<>),

  <"FloatLit"> => syntax::Pattern::FloatConst(<>),
};

Patterns: syntax::Pattern = {
  <patterns: CommaSep<Pattern>> => {
    if patterns.len() == 1 {
      patterns.into_iter().next().unwrap()
    } else {
      syntax::Pattern::Tuple(patterns)
    }
  }
};
