use crate::data::raw_ast as syntax;
use crate::data::purity::Purity;
use crate::lex;

grammar;

// Lexer Integration

extern {
  type Location = usize;
  type Error = lex::Error;

  enum lex::Token {
    "UpperName" => lex::Token::UpperName(<String>),
    "LowerName" => lex::Token::LowerName(<String>),
    "FloatLit" => lex::Token::FloatLit(<f64>),
    "ByteLit" => lex::Token::ByteLit(<u8>),
    "IntLit" => lex::Token::IntLit(<i64>),
    "StringLit" => lex::Token::StringLit(<String>),

    "type" => lex::Token::Type,
    "match" => lex::Token::Match,
    "if" => lex::Token::If,
    "else" => lex::Token::Else,
    "let" => lex::Token::Let,
    "in" => lex::Token::In,
    "proc" => lex::Token::Proc,
    "do" => lex::Token::Do,
    "then" => lex::Token::Then,
    "module" => lex::Token::Module,
    "import" => lex::Token::Import,
    "file" => lex::Token::File,
    "from" => lex::Token::From,
    "expose" => lex::Token::Expose,
    "with" => lex::Token::With,

    "(" => lex::Token::LParen,
    ")" => lex::Token::RParen,
    "[" => lex::Token::LSquare,
    "]" => lex::Token::RSquare,
    "{" => lex::Token::LCurly,
    "}" => lex::Token::RCurly,

    "," => lex::Token::Comma,
    ":" => lex::Token::Colon,
    "=" => lex::Token::Equal,
    "->" => lex::Token::Arrow,
    "\\" => lex::Token::BackSlash,
    "_" => lex::Token::Underscore,
    "." => lex::Token::Dot,

    "+&" => lex::Token::AddAmp,
    "-&" => lex::Token::SubAmp,
    "*&" => lex::Token::MulAmp,
    "/&" => lex::Token::DivAmp,
    "=&" => lex::Token::EqualAmp,
    "<&" => lex::Token::LtAmp,
    "<=&" => lex::Token::LteAmp,
    ">&" => lex::Token::GtAmp,
    ">=&" => lex::Token::GteAmp,
    "+" => lex::Token::Add,
    "-" => lex::Token::Sub,
    "*" => lex::Token::Mul,
    "/" => lex::Token::Div,
    "<" => lex::Token::Lt,
    "<=" => lex::Token::Lte,
    ">" => lex::Token::Gt,
    ">=" => lex::Token::Gte,
    "+." => lex::Token::AddDot,
    "-." => lex::Token::SubDot,
    "*." => lex::Token::MulDot,
    "/." => lex::Token::DivDot,
    "=." => lex::Token::EqualDot,
    "<." => lex::Token::LtDot,
    "<=." => lex::Token::LteDot,
    ">." => lex::Token::GtDot,
    ">=." => lex::Token::GteDot,
  }
}

// Macros

CommaSep<T>: Vec<T> = {
  <items: (<T> ",")*> <last: T?> => match last {
    None => items,
    Some(item) => {
      let mut result = items;
      result.push(item);
      result
    }
  }
};

Spanned<T>: syntax::Expr = {
  <lo: @L> <expr:T> <hi: @R> => {
    if let syntax::Expr::Span(_, _, _) = &expr {
      expr
    } else {
      syntax::Expr::Span(lo, hi, Box::new(expr))
    }
  },
};

// Names and Strings

#[inline]
TypeName: syntax::TypeName = {
  <"UpperName"> => syntax::TypeName(<>),
};

#[inline]
CtorName: syntax::CtorName = {
  <"UpperName"> => syntax::CtorName(<>),
};

#[inline]
TypeParam: syntax::TypeParam = {
  <"LowerName"> => syntax::TypeParam(<>),
};

#[inline]
ValName: syntax::ValName = {
  <"LowerName"> => syntax::ValName(<>),
};

#[inline]
ModName: syntax::ModName = {
  <"UpperName"> => syntax::ModName(<>),
};

#[inline]
OptProc: Purity = {
  "proc" => Purity::Impure,
  () => Purity::Pure,
};

// Top-Level Items

pub Program: syntax::Program = {
  <Item*> => syntax::Program(<>),
};

Item: syntax::Item = {
  <TypeDef>,
  <ValDef>,
  <ModDef>,
  <ModImport>,
  <ModExpose>,
};

// Type Definitions

TypeDef: syntax::Item = {
  "type" <name: TypeName> <params: TypeParam*>
    "{" <cases: CommaSep<TypeCase>> "}" =>
      syntax::Item::TypeDef(name, params, cases),
};

TypeCase: (syntax::CtorName, Option<syntax::Type>) = {
  <name: CtorName> <content: ("(" <Types> ")")?> => (name, content),
};

// Value Definitions

ValDef: syntax::Item = {
  <purity: OptProc>
  <name: ValName>
  "(" <args: CommaSep<(<ValName> ":" <Type>)>> ")"
  ":" <ret_type: Type>
  "=" <body: Expr> => {
    let (arg_pat, arg_type) = if args.len() == 1 {
      let (arg_name, arg_type) = args.into_iter().next().unwrap();
      (syntax::Pattern::Var(arg_name), arg_type)
    } else {
      let mut pat_items = Vec::new();
      let mut type_items = Vec::new();

      for (pat_item, type_item) in args {
        pat_items.push(syntax::Pattern::Var(pat_item));
        type_items.push(type_item);
      }

      (syntax::Pattern::Tuple(pat_items), syntax::Type::Tuple(type_items))
    };

    let def_type = syntax::Type::Func(purity, Box::new(arg_type), Box::new(ret_type));
    let def_body = syntax::Expr::Lam(purity, arg_pat, Box::new(body));

    syntax::Item::ValDef(name, def_type, def_body)
  },

  <name: ValName> ":" <def_type: Type> "=" <val: Expr> => {
    syntax::Item::ValDef(name, def_type, val)
  },
};

// Module Defintions

ModDef: syntax::Item = {
  "module" <name: ModName> "=" <spec: ModSpec>
  <bindings: ("with" "{" <CommaSep<ModBinding>> "}")?>
  <expose: OptExposeSpec> =>
    syntax::Item::ModDef(name, spec, bindings.unwrap_or_default(), expose),
};

ModImport: syntax::Item = {
  "import" <name: ModName> <expose: OptExposeSpec> =>
    syntax::Item::ModImport(name, expose),
};

ModExpose: syntax::Item = {
  "from" <path: ModPath> <expose: ExposeSpec> =>
    syntax::Item::ModExpose(path, expose),
};

ModSpec: syntax::ModSpec = {
  "file" <path: "StringLit"> =>
    syntax::ModSpec::File(path.split('/').map(|s| s.to_owned()).collect()),

  "{" <Program> "}" => syntax::ModSpec::Inline(<>),
};

ModBinding: syntax::ModBinding = {
  <name: ModName> =>
    syntax::ModBinding {
      name: name.clone(),
      binding: syntax::ModPath(vec![name]),
    },

  <name: ModName> "=" <binding: ModPath> =>
    syntax::ModBinding { name, binding },
};

#[inline]
ModPath: syntax::ModPath = {
  <path: (<ModName> ".")*> <last: ModName> => {
    let mut result = path;
    result.push(last);
    syntax::ModPath(result)
  }
};

#[inline]
QualPath: syntax::ModPath = {
  <(<ModName> ".")*> =>
    syntax::ModPath(<>),
};

ExposeSpec: syntax::ExposeSpec = {
  // TODO: Add support for glob imports

  "expose" "{" <CommaSep<ExposeItem>> "}" =>
    syntax::ExposeSpec::Specific(<>),
};

OptExposeSpec: syntax::ExposeSpec = {
  <spec: ExposeSpec?> =>
    spec.unwrap_or_else(|| syntax::ExposeSpec::Specific(vec![])),
};

ExposeItem: syntax::ExposeItem = {
  <name: ValName> => syntax::ExposeItem::Val(name),

  <name: TypeName> <ctors: ("{" <CommaSep<CtorName>> "}")?> =>
    syntax::ExposeItem::Type(name, ctors.unwrap_or_default()),

  "module" <name: ModName> <expose: OptExposeSpec> =>
    syntax::ExposeItem::Mod(name, Box::new(expose)),
};

// Types

QualTypeName: (syntax::ModPath, syntax::TypeName) = {
  <path: QualPath> <name: TypeName> =>
    (path, name)
};

AtomicType: syntax::Type = {
  "(" <Types> ")",
  <TypeParam> => syntax::Type::Var(<>),
  <QualTypeName> => syntax::Type::App(<>.0, <>.1, Vec::new()),
};

AppType: syntax::Type = {
  <AtomicType>,
  <name: QualTypeName> <args: AtomicType+> =>
    syntax::Type::App(name.0, name.1, args),
};

FuncType: syntax::Type = {
  <AppType>,
  <purity: OptProc> <arg: AppType> "->" <ret: FuncType> =>
    syntax::Type::Func(purity, Box::new(arg), Box::new(ret)),
};

Type: syntax::Type = {
  <FuncType>,
};

Types: syntax::Type = {
  <types: CommaSep<Type>> => {
    if types.len() == 1 {
      types.into_iter().next().unwrap()
    } else {
      syntax::Type::Tuple(types)
    }
  },
};

// Expressions

AtomicExpr_: syntax::Expr = {
  "(" <Exprs> ")",

  <path: QualPath> <name: ValName> => {
    if path.0.is_empty() {
      syntax::Expr::Var(name)
    } else {
      syntax::Expr::QualName(path, name)
    }
  },

  <path: QualPath> <name: CtorName> => syntax::Expr::Ctor(path, name),

  "[" <CommaSep<Expr>> "]" => syntax::Expr::ArrayLit(<>),

  <"IntLit"> => syntax::Expr::IntLit(<>),

  <"ByteLit"> => syntax::Expr::ByteLit(<>),

  <"FloatLit"> => syntax::Expr::FloatLit(<>),

  <"StringLit"> => syntax::Expr::TextLit(<>),

  <MatchExpr>,

  <IfExpr>,
};

AtomicExpr: syntax::Expr = {
  <Spanned<AtomicExpr_>>,
};

PrefixExpr_: syntax::Expr = {
  <AtomicExpr>,

  "-&" <PrefixExpr> => syntax::unop(syntax::Op::NegByte, <>),
  "-" <PrefixExpr> => syntax::unop(syntax::Op::NegInt, <>),
  "-." <PrefixExpr> => syntax::unop(syntax::Op::NegFloat, <>),
};

PrefixExpr: syntax::Expr = {
  <Spanned<PrefixExpr_>>,
};

MatchExpr_: syntax::Expr = {
  "match" <expr: Expr> "{" <cases: CommaSep<(<Pattern> "->" <Expr>)>> "}" =>
    syntax::Expr::Match(Box::new(expr), cases),
};

MatchExpr: syntax::Expr = {
  <Spanned<MatchExpr_>>,
};

IfExpr_: syntax::Expr = {
  "if" <expr: Expr> "{" <if_block: Expr> "}" "else" <else_if_block: IfExpr> =>
    syntax::Expr::Match(
      Box::new(expr),
      vec![
        (
          syntax::Pattern::Ctor(syntax::ModPath(vec![]), syntax::CtorName("True".to_string()), None),
          if_block
        ),
        (
          syntax::Pattern::Ctor(syntax::ModPath(vec![]), syntax::CtorName("False".to_string()), None),
          else_if_block
        )
      ]
    ),
  "if" <expr: Expr> "{" <if_block: Expr> "}" "else" "{" <else_block: Expr> "}" =>
    syntax::Expr::Match(
      Box::new(expr),
      vec![
        (
          syntax::Pattern::Ctor(syntax::ModPath(vec![]), syntax::CtorName("True".to_string()), None),
          if_block
        ),
        (
          syntax::Pattern::Ctor(syntax::ModPath(vec![]), syntax::CtorName("False".to_string()), None),
          else_block
        )
      ]
    ),
};

IfExpr: syntax::Expr = {
  <Spanned<IfExpr_>>,
};

AppExpr_: syntax::Expr = {
  <PrefixExpr>,

  <func: AppExpr> "(" <args: Exprs> ")" =>
    syntax::Expr::App(Purity::Pure, Box::new(func), Box::new(args)),
};

AppExpr: syntax::Expr = {
  <Spanned<AppExpr_>>,
};

ArithProdExpr_: syntax::Expr = {
  <AppExpr>,

  <left: ArithProdExpr> "*&" <right: AppExpr> => syntax::binop(syntax::Op::MulByte, left, right),
  <left: ArithProdExpr> "/&" <right: AppExpr> => syntax::binop(syntax::Op::DivByte, left, right),

  <left: ArithProdExpr> "*" <right: AppExpr> => syntax::binop(syntax::Op::MulInt, left, right),
  <left: ArithProdExpr> "/" <right: AppExpr> => syntax::binop(syntax::Op::DivInt, left, right),

  <left: ArithProdExpr> "*." <right: AppExpr> => syntax::binop(syntax::Op::MulFloat, left, right),
  <left: ArithProdExpr> "/." <right: AppExpr> => syntax::binop(syntax::Op::DivFloat, left, right),
};

ArithProdExpr: syntax::Expr = {
  <Spanned<ArithProdExpr_>>,
};

ArithSumExpr_: syntax::Expr = {
  <ArithProdExpr>,

  <left: ArithSumExpr> "+&" <right: ArithProdExpr> => syntax::binop(syntax::Op::AddByte, left, right),
  <left: ArithSumExpr> "-&" <right: ArithProdExpr> => syntax::binop(syntax::Op::SubByte, left, right),

  <left: ArithSumExpr> "+" <right: ArithProdExpr> => syntax::binop(syntax::Op::AddInt, left, right),
  <left: ArithSumExpr> "-" <right: ArithProdExpr> => syntax::binop(syntax::Op::SubInt, left, right),

  <left: ArithSumExpr> "+." <right: ArithProdExpr> => syntax::binop(syntax::Op::AddFloat, left, right),
  <left: ArithSumExpr> "-." <right: ArithProdExpr> => syntax::binop(syntax::Op::SubFloat, left, right),
};

ArithSumExpr: syntax::Expr = {
  <Spanned<ArithSumExpr_>>,
};

// TODO: Translating greater-than to less-than reverses the evaluation order of the operands.
// If the operands have side effects, this can alter the program's semantics!
ArithCompExpr_: syntax::Expr = {
  <ArithSumExpr>,

  <left: ArithSumExpr> "=&" <right: ArithSumExpr> => syntax::binop(syntax::Op::EqByte, left, right),
  <left: ArithSumExpr> "<&" <right: ArithSumExpr> => syntax::binop(syntax::Op::LtByte, left, right),
  <left: ArithSumExpr> "<=&" <right: ArithSumExpr> => syntax::binop(syntax::Op::LteByte, left, right),
  <left: ArithSumExpr> ">&" <right: ArithSumExpr> => syntax::binop(syntax::Op::LtByte, right, left),
  <left: ArithSumExpr> ">=&" <right: ArithSumExpr> => syntax::binop(syntax::Op::LteByte, right, left),

  <left: ArithSumExpr> "=" <right: ArithSumExpr> => syntax::binop(syntax::Op::EqInt, left, right),
  <left: ArithSumExpr> "<" <right: ArithSumExpr> => syntax::binop(syntax::Op::LtInt, left, right),
  <left: ArithSumExpr> "<=" <right: ArithSumExpr> => syntax::binop(syntax::Op::LteInt, left, right),
  <left: ArithSumExpr> ">" <right: ArithSumExpr> => syntax::binop(syntax::Op::LtInt, right, left),
  <left: ArithSumExpr> ">=" <right: ArithSumExpr> => syntax::binop(syntax::Op::LteInt, right, left),

  <left: ArithSumExpr> "=." <right: ArithSumExpr> => syntax::binop(syntax::Op::EqFloat, left, right),
  <left: ArithSumExpr> "<." <right: ArithSumExpr> => syntax::binop(syntax::Op::LtFloat, left, right),
  <left: ArithSumExpr> "<=." <right: ArithSumExpr> => syntax::binop(syntax::Op::LteFloat, left, right),
  <left: ArithSumExpr> ">." <right: ArithSumExpr> => syntax::binop(syntax::Op::LtFloat, right, left),
  <left: ArithSumExpr> ">=." <right: ArithSumExpr> => syntax::binop(syntax::Op::LteFloat, right, left),
};

ArithCompExpr: syntax::Expr = {
  <Spanned<ArithCompExpr_>>,
};

ArithExpr: syntax::Expr = {
  <ArithCompExpr>,
};

BlockExpr_: syntax::Expr = {
  <ArithExpr>,

  <purity: OptProc> "\\" <param: Pattern> "->" <body: BlockExpr> =>
    syntax::Expr::Lam(purity, param, Box::new(body)),

  "let" <lhs: Pattern> "=" <rhs: Expr> "in" <body: BlockExpr> =>
    syntax::Expr::Let(lhs, Box::new(rhs), Box::new(body)),

  "do" <func: AppExpr> "(" <arg: Exprs> ")" <rest: ("then" <BlockExpr>)?> => {
    let app = syntax::Expr::App(Purity::Impure, Box::new(func), Box::new(arg));

    match rest {
      Some(rest) => syntax::Expr::Let(syntax::Pattern::Any, Box::new(app), Box::new(rest)),
      None => app,
    }
  }
};

BlockExpr: syntax::Expr = {
  <Spanned<BlockExpr_>>,
};

Expr: syntax::Expr = {
  <BlockExpr>,
};

Exprs_: syntax::Expr = {
  <exprs: CommaSep<Expr>> => {
    if exprs.len() == 1 {
      exprs.into_iter().next().unwrap()
    } else {
      syntax::Expr::Tuple(exprs)
    }
  },
};

Exprs: syntax::Expr = {
  <Spanned<Exprs_>>,
};

// Patterns

Pattern_: syntax::Pattern = {
  "(" <Patterns> ")",

  "_" => syntax::Pattern::Any,

  <ValName> => syntax::Pattern::Var(<>),

  <path: QualPath> <ctor: CtorName> =>
    syntax::Pattern::Ctor(path, ctor, None),

  <path: QualPath> <ctor: CtorName> "(" <args: Patterns> ")" =>
    syntax::Pattern::Ctor(path, ctor, Some(Box::new(args))),

  <"IntLit"> => syntax::Pattern::IntConst(<>),

  <"ByteLit"> => syntax::Pattern::ByteConst(<>),

  <"FloatLit"> => syntax::Pattern::FloatConst(<>),
};

Pattern: syntax::Pattern = {
  <lo: @L> <pat: Pattern_> <hi: @R> => {
    if let syntax::Pattern::Span(_, _, _) = &pat {
      pat
    } else {
      syntax::Pattern::Span(lo, hi, Box::new(pat))
    }
  },
};

Patterns_: syntax::Pattern = {
  <patterns: CommaSep<Pattern>> => {
    if patterns.len() == 1 {
      patterns.into_iter().next().unwrap()
    } else {
      syntax::Pattern::Tuple(patterns)
    }
  }
};

Patterns: syntax::Pattern = {
  <lo: @L> <pat: Patterns_> <hi: @R> => {
    if let syntax::Pattern::Span(_, _, _) = &pat {
      pat
    } else {
      syntax::Pattern::Span(lo, hi, Box::new(pat))
    }
  },
};
