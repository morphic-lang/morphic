module Core = file "lib/core/core.txt"
  expose {
    module Io expose { writeln },
    module String expose { string_to_nat, int_to_string },
    module Option expose { Option { Some, None } },
    module Bool expose { not },
  }

// Trial division is inefficient, but it's a simple test of the performance of basic arithmetic and
// control flow operations.
has_divisor_above(n: Int, i: Int): Bool =
  if i * i > n {
    False
  } else if (n / i) * i = n {
    True
  } else {
    has_divisor_above(n, i + 1)
  }

is_prime(n: Int): Bool =
  not(has_divisor_above(n, 2))

count_primes_rec(n: Int, accum: Int): Int =
  if n <= 1 {
    accum
  } else if is_prime(n) {
    count_primes_rec(n - 1, accum + 1)
  } else {
    count_primes_rec(n - 1, accum)
  }

count_primes(n: Int): Int =
  count_primes_rec(n, 0)

proc main(): () =
  match string_to_nat(do input()) {
    Some(limit) ->
      do output("There are ") then
      do output(int_to_string(count_primes(limit))) then
      do output(" primes <= ") then
      do output(int_to_string(limit)) then
      do output("\n"),

    None ->
      do writeln("Please enter a positive integer"),
  }
