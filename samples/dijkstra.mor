module Core = file "lib/core/core.mor"
  expose {
    module Option expose { Option { Some, None } },
    module Io expose { writeln },
    module String,
    module Iter expose { for_each },
  }

module Heap = file "lib/heap.mor"
  with { Core }
  expose { Heap { Heap } }

module Test = file "lib/test.mor"
  with { Core }
  expose { test }

module Graph = {

  module Core = file "lib/core/core.mor"
    expose {
      module Array,
      module Iter,
      module Math,
    }

  pub type NodeId {
    pub NodeId(Int),
  }

  pub type Weight {
    pub Weight(Int),
  }

  type Graph {
    // the outer `Array` is indexed by nodes
    Graph(Array Array Weight),
  }

  pub new(): Graph =
    Graph([])

  pub with_capacity(capacity: Int): Graph =
    Graph(reserve([], capacity))

  pub from_edges(edges: Array Array Weight): Graph =
    Graph(edges)

  fill_below(graph: Graph, id: Int): Graph =
    let Graph(edges) = graph in
    let n = len(edges) in
    Graph(Iter.foldl(Iter.range(n, id + 1), edges, \(a, _) -> push(a, [])))

  pub add_edge(graph: Graph, n1: NodeId, n2: NodeId, e: Weight): Graph =
    let NodeId(id1) = n1 in
    let NodeId(id2) = n2 in
    graph
    |> fill_below(Math.cmp_max(id1, id2))
    |> Array.set(id1, e)
    |> Array.set(id2, e)

} expose { NodeId, Weight, Graph }

heap_to_arr(heap: Heap a): Array a =
  let (new_arr, item) = Heap.remove(heap) in
  match item {
    Some(x) -> push(heap_to_arr(new_arr), x)
    None -> [],
  }

test_heap(): Bool =
  let heap = Heap.empty(\(x, y) -> x > y) in
  heap
  |> Heap.insert(8)
  |> Heap.insert(7)
  |> Heap.insert(6)
  |> Heap.insert(9)
  |> Heap.insert(3)
  |> Heap.insert(1)
  |> Heap.insert(5)
  |> Heap.insert(2)
  |> Heap.insert(0)
  |> Heap.insert(4)
  |> Heap.insert(10) in
  let expected = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] in
  Iter.eq(Iter.items(heap_to_arr(heap)), Iter.items(expected))

test_dijkstra(): Bool =
  let edges = [
    [Weight(0), Weight(4), Weight(0), Weight(0), Weight(0), Weight(0), Weight(0), Weight(8), Weight(0)],
    [Weight(4), Weight(0), Weight(8), Weight(0), Weight(0), Weight(0), Weight(0), Weight(11),Weight(0)],
    [Weight(0), Weight(8), Weight(0), Weight(7), Weight(0), Weight(4), Weight(0), Weight(0), Weight(2)],
    [Weight(0), Weight(0), Weight(7), Weight(0), Weight(9), Weight(14),Weight(0), Weight(0), Weight(0)],
    [Weight(0), Weight(0), Weight(0), Weight(9), Weight(0), Weight(10),Weight(0), Weight(0), Weight(0)],
    [Weight(0), Weight(0), Weight(4), Weight(14),Weight(10),Weight(0), Weight(2), Weight(0), Weight(0)],
    [Weight(0), Weight(0), Weight(0), Weight(0), Weight(0), Weight(2), Weight(0), Weight(1), Weight(6)],
    [Weight(8), Weight(11),Weight(0), Weight(0), Weight(0), Weight(0), Weight(1), Weight(0), Weight(7)],
    [Weight(0), Weight(0), Weight(2), Weight(0), Weight(0), Weight(0), Weight(6), Weight(7), Weight(0)],
  ] in
  let expected = [
    NodeId(0), NodeId(4), NodeId(12),
    NodeId(19),NodeId(21),NodeId(11),
    NodeId(9), NodeId(8), NodeId(14),
  ] in
  dijkstra(Graph.from_edges(edges)) == expected

dijkstra(graph: Graph)

proc main(): () =
  test("heap works", test_heap()) in
  test("dijkstra works", test_dijkstra()) in
