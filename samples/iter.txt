module Core = file "lib/core/core.txt"
  expose { module Iter }

proc main(): () =
  // it = 6
  let it = Iter.sum(Iter.items([1, 2, 3])) in

  let () = if it = 6 {
    do output("it worked\n")
  } else {
    do output("it didnt wtf\n")
  } in

  // it2 = ((5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10))
  let it2 = Iter.zip(Iter.take(Iter.forever(5), it), Iter.ints(5)) in

  // it3 = (10, 11, 12, 13, 14, 15)
  let it3 = Iter.map(it2, \(x, y) -> x + y) in

  // it4 = (13, 14, 15)
  let it4 = Iter.filter(it3, \n -> n > 12) in

  // it5 = (13, 14, 15, 0)
  let it5 = Iter.chain(it4, Iter.once(0)) in

  // it6 = 42
  let it6 = Iter.foldr(it5, 0, \(x, y) -> x + y) in

  if it6 = 42 {
    do output("it worked\n")
  } else {
    do output("it didnt wtf\n")
  }
