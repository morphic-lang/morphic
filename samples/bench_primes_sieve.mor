module Core = file "lib/core/core.mor"
  expose {
    module Iter expose { Iter },
    module Array,
    module String expose { int_to_string, string_to_nat },
    module Io expose { writeln },
    module Option expose { Option { Some, None } },
  }

module Bench = file "lib/bench_common.mor" with { Core }
  expose { repeat }

type Primality {
  Prime,
  Composite,
}

sieve(limit: Int): Array Primality =
  let init_arr =
    Array.fill(limit, Prime)
    |> Array.set(0, Composite)
    |> Array.set(1, Composite)
  in
  Iter.range(2, limit)
  |> Iter.foldl(init_arr, \(arr, n) ->
    match Array.get(arr, n) {
      Prime ->
        Iter.ints(2)
        |> Iter.map(\i -> i * n)
        |> Iter.take_while(\i -> i < limit)
        |> Iter.foldl(arr, \(new, i) -> Array.set(new, i, Composite)),

      Composite -> arr,
    }
  )

proc main(): () =
  match (string_to_nat(do input()), string_to_nat(do input())) {
    (Some(iters), Some(limit)) ->
      match repeat(iters, \() -> sieve(limit)) {
        Some(primes) ->
          Iter.items(primes)
          |> Iter.enumerate()
          |> do Iter.for_each(proc \(i, status) ->
            match status {
              Prime -> do writeln(int_to_string(i)),
              Composite -> (),
            }
          ),

        None -> (),
      },

    (_, _) ->
      do writeln("Please enter two positive integers (an iteration count and a limit)"),
  }
