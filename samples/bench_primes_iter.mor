module Core = file "../morphic/stdlib/core/core.mor"
  expose {
    module Io expose { writeln },
    module String expose { string_to_nat, int_to_string },
    module Option expose { Option { Some, None } },
    module Bool expose { not },
    module Iter expose { Iter },
  }

module Bench = file "bench_common.mor" with { Core }
  expose { repeat }

is_prime(n: Int): Bool =
  not(Iter.any(
    Iter.take_while(Iter.ints(2), \i -> i * i <= n),
    \i -> (n / i) * i = n,
  ))

primes_to(limit: Int): Iter Int =
  Iter.filter(Iter.range(2, limit + 1), is_prime)

count_primes(limit: Int): Int =
  Iter.count(primes_to(limit))

proc main(): () =
  match (string_to_nat(do input()), string_to_nat(do input())) {
    (Some(iters), Some(limit)) ->
      match repeat(iters, \() -> count_primes(limit)) {
        Some(count) ->
          do output("There are ") then
          do output(int_to_string(count)) then
          do output(" primes <= ") then
          do output(int_to_string(limit)) then
          do output("\n"),
        None -> (),
      },

    (_, _) ->
      do writeln("Please enter two positive integers (an iteration count and a limit)"),
  }
