module Core = file "lib/core/core.mor" expose {
    module Array,
    module Iter,
    module String expose { int_to_string },
    module Rand expose { Mt19937_64 { Mt19937_64 }, mt19937_64_next, seed_mt19937_64 },
}

// TODO: find some way to test rand as part of the automatic test suite

proc rand_int_arr_rec(accum: Array Int, count: Int): Array Int =
    if count <= 0 {
        accum
    } else {
        do rand_int_arr_rec(push(accum, do rand_int()), count - 1)
    }

proc rand_int_arr(count: Int): Array Int =
    do rand_int_arr_rec([], count)

proc rand_mt_arr_rec(accum: Array Int, mt: Mt19937_64, count: Int): Array Int =
    if count <= 0 {
        accum
    } else {
        let (new_mt, val) = mt19937_64_next(mt) in
        do rand_mt_arr_rec(push(accum, val), new_mt, count - 1)
    }

proc rand_mt_arr(count: Int, seed: Int): Array Int =
    do rand_mt_arr_rec([], seed_mt19937_64(seed), count)

proc print_arr(arr: Array Int): () =
    do output("[") then
    do Iter.for_each(
        Iter.items(arr),
        proc \i -> do output(push(int_to_string(i), 44b)) // 44b is ','
    ) then
    do output("]\n")

proc main(): () =
    do output("rand_int: ") then
    do print_arr(do rand_int_arr(10)) then
    do output("\nMt19937_64: ") then
    do print_arr(do rand_mt_arr(10, 42))
