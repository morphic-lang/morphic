module Core = file "lib/core/core.mor"
  expose {
    module Array expose { get, set },
    module String,
    module Io expose { writeln },
  }

map_from(arr: Array a, f: a -> a, idx: Int): Array a =
  if idx = len(arr) {
    arr
  } else {
    let (x, hole) = item(arr, idx) in
    map_from(hole(f(x)), f, idx + 1)
  }

map(arr: Array a, f: a -> a): Array a =
  map_from(arr, f, 0)

proc for_each_from(arr: Array a, f: proc a -> b, idx: Int): () =
  if idx = len(arr) {
    ()
  } else {
    let (x, _) = item(arr, idx) in
    let _ = do f(x) in
    do for_each_from(arr, f, idx + 1)
  }

proc for_each(arr: Array a, f: proc a -> b): () =
  do for_each_from(arr, f, 0)

proc print_all(arr: Array Int): () =
  do for_each(arr, proc \i -> do writeln(String.int_to_string(i)))

proc print_and(arr: Array Int): Array Int =
  do writeln("vvvvvvv") then
  do print_all(arr) then
  do writeln("^^^^^^^") then
  arr

reverse_from(arr: Array a, idx: Int): Array a =
  if idx >= len(arr) / 2 {
    arr
  } else {
    reverse_from(
      swap(arr, idx, len(arr) - idx - 1),
      idx + 1
    )
  }

reverse(arr: Array a): Array a =
  reverse_from(arr, 0)

swap(arr: Array a, left_idx: Int, right_idx: Int): Array a =
  let (left_el, left_hole) = item(arr, left_idx) in
  let right_el = get(arr, right_idx) in
  set(left_hole(right_el), right_idx, left_el)

favs : Array Int =
  [1, 2, 3, 4, 5]

proc main(): () =
  let arr = do print_and(favs) in
  let better = do print_and(map(favs, \x -> x + 1)) in
  let even_better = do print_and(map(better, \x -> x * x)) in
  let now_backwards = do print_and(reverse(even_better)) in
  ()
