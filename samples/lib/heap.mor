import Core 
  expose {
    module Array,
    module Option expose { Option { Some, None } },
  }

pub type Heap a {
  pub Heap((a, a) -> Bool, Array a),
}

// If `cmp(x, y)` returns true, then `x` has higher priority than `y`. For
// example, `cmp = \(x, y) -> x < y` results in a min-heap.
pub empty(cmp: (a, a) -> Bool): Heap a =
  Heap(cmp, [])

pub insert(heap: Heap a, item: a): Heap a =
  let Heap(cmp, arr) = heap in
  let new_arr = push(arr, item) in
  let i = len(new_arr) - 1 in
  sift_up(Heap(cmp, new_arr), i)

pub remove(heap: Heap a): (Heap a, Option a) =
  let Heap(cmp, arr) = heap in
  if len(arr) > 0 {
    let i = len(arr) - 1 in
    let (new_arr, root) = pop(swap(arr, 0, i)) in
    (sift_down(Heap(cmp, new_arr), 0), Some(root))
  } else {
    (Heap(cmp, arr), None)
  }

swap(arr: Array a, i: Int, j: Int): Array a =
  let item_i = Array.get(arr, i) in
  let (item_j, hole_j) = extract(arr, j) in
  Array.set(hole_j(item_i), i, item_j)

sift_up(heap: Heap a, i: Int): Heap a =
  let Heap(cmp, arr) = heap in
  let parent = (i - 1) / 2 in
  if i = 0 || cmp(Array.get(arr, parent), Array.get(arr, i)) {
    Heap(cmp, arr)
  } else {
    let new_heap = Heap(cmp, swap(arr, parent, i)) in
    sift_up(new_heap, parent)
  }

sift_down(heap: Heap a, i: Int): Heap a =
  let Heap(cmp, arr) = heap in
  let left_idx = 2 * i + 1 in
  let right_idx = 2 * i + 2 in

  let largest_left = if left_idx < len(arr) && cmp(Array.get(arr, left_idx), Array.get(arr, i)) {
    left_idx
  } else {
    i
  } in

  let largest = if right_idx < len(arr) && cmp(Array.get(arr, right_idx), Array.get(arr, largest_left)) {
    right_idx
  } else {
    largest_left
  } in

  if largest = i {
    Heap(cmp, arr)
  } else {
    let new_heap = Heap(cmp, swap(arr, largest, i)) in
    sift_down(new_heap, largest)
  }
