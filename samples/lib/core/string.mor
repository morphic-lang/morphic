import Array
import Option expose { Option { Some, None } }
import Iter

nat_to_string(i: Int): Array Byte =
  let digit_to_string = \d ->
    match d {
        0 -> "0",
        1 -> "1",
        2 -> "2",
        3 -> "3",
        4 -> "4",
        5 -> "5",
        6 -> "6",
        7 -> "7",
        8 -> "8",
        9 -> "9",
        _ -> "",
    } in
  if i = 0 {
    ""
  } else {
    Array.concat(nat_to_string(i / 10), digit_to_string(i - i / 10 * 10))
  }

int_to_string(i: Int): Array Byte =
  if i = 0 {
    "0"
  } else if i < 0 {
    Array.concat("-", nat_to_string(0 - i))
  } else {
    nat_to_string(i)
  }

digit_ascii_base: Byte = 48b

digit_to_nat(char: Byte): Option Int =
  match char {
    // 0 is ascii code 48
    48b -> Some(0),
    49b -> Some(1),
    50b -> Some(2),
    51b -> Some(3),
    52b -> Some(4),
    53b -> Some(5),
    54b -> Some(6),
    55b -> Some(7),
    56b -> Some(8),
    57b -> Some(9),
    _ -> None,
  }

string_to_nat(str: Array Byte): Option Int =
  Iter.foldl(
    Iter.items(str),
    Some(0),
    \(acc_opt, char) -> Option.and_then(
      acc_opt,
      \acc -> Option.map(digit_to_nat(char), \digit -> acc * 10 + digit),
    )
  )

equal(a: Array Byte, b: Array Byte): Bool =
  if len(a) = len(b) {
    Iter.all(Iter.zip(Iter.items(a), Iter.items(b)), \(x, y) -> x =& y)
  } else {
    False
  }
