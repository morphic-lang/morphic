import Bool expose { and, or }

byte_is_even(byte: Byte): Bool =
  byte =& (byte /& 2b) *& 2b

int_is_even(int: Int): Bool =
  int = (int / 2) * 2

byte_to_int(byte: Byte): Int =
  if byte_is_even(byte        ) { 0 } else {   1 } +
  if byte_is_even(byte /&   2b) { 0 } else {   2 } +
  if byte_is_even(byte /&   4b) { 0 } else {   4 } +
  if byte_is_even(byte /&   8b) { 0 } else {   8 } +
  if byte_is_even(byte /&  16b) { 0 } else {  16 } +
  if byte_is_even(byte /&  32b) { 0 } else {  32 } +
  if byte_is_even(byte /&  64b) { 0 } else {  64 } +
  if byte_is_even(byte /& 128b) { 0 } else { 128 }

int_to_byte(int: Int): Byte =
  if int_is_even(int      ) { 0b } else {   1b } +&
  if int_is_even(int /   2) { 0b } else {   2b } +&
  if int_is_even(int /   4) { 0b } else {   4b } +&
  if int_is_even(int /   8) { 0b } else {   8b } +&
  if int_is_even(int /  16) { 0b } else {  16b } +&
  if int_is_even(int /  32) { 0b } else {  32b } +&
  if int_is_even(int /  64) { 0b } else {  64b } +&
  if int_is_even(int / 128) { 0b } else { 128b }

rem(a: Int, b: Int): Int =
  a - b * (a / b)

mod(a: Int, b: Int): Int =
  if a < 0 {
    rem(a, b) + b
  } else {
    rem(a, b)
  }

pow(a: Int, b: Int): Int =
  pow_rec(1, a, b)

pow_rec(accum: Int, a: Int, b: Int): Int =
  if (b = 0) {
    accum
  } else {
    pow_rec(a * accum, a, b - 1)
  }

byte_pow(a: Byte, b: Byte): Byte =
  byte_pow_rec(1b, a, b)

byte_pow_rec(accum: Byte, a: Byte, b: Byte): Byte =
  if (b =& 0b) {
    accum
  } else {
    byte_pow_rec(a *& accum, a, b -& 1b)
  }

bitwise_and(a: Byte, b: Byte): Byte =
  let c = 0b in
  let c1 = if (and(a >=& 128b, b >=& 128b)) {
    c +& 128b
  } else {
    c
  } in
  let a1 = a +& a in
  let b1 = b +& b in
  let c2 = if (and(a1 >=& 128b, b1 >=& 128b)) {
    c1 +& 64b
  } else {
    c1
  } in
  let a2 = a1 +& a1 in
  let b2 = b1 +& b1 in
  let c3 = if (and(a2 >=& 128b, b2 >=& 128b)) {
    c2 +& 32b
  } else {
    c2
  } in
  let a3 = a2 +& a2 in
  let b3 = b2 +& b2 in
  let c4 = if (and(a3 >=& 128b, b3 >=& 128b)) {
    c3 +& 16b
  } else {
    c3
  } in
  let a4 = a3 +& a3 in
  let b4 = b3 +& b3 in
  let c5 = if (and(a4 >=& 128b, b4 >=& 128b)) {
    c4 +& 8b
  } else {
    c4
  } in
  let a5 = a4 +& a4 in
  let b5 = b4 +& b4 in
  let c6 = if (and(a5 >=& 128b, b5 >=& 128b)) {
    c5 +& 4b
  } else {
    c5
  } in
  let a6 = a5 +& a5 in
  let b6 = b5 +& b5 in
  let c7 = if (and(a6 >=& 128b, b6 >=& 128b)) {
    c6 +& 2b
  } else {
    c6
  } in
  let a7 = a6 +& a6 in
  let b7 = b6 +& b6 in
  let c8 = if (and(a7 >=& 128b, b7 >=& 128b)) {
    c7 +& 1b
  } else {
    c7
  } in
  c8

bitwise_or(a: Byte, b: Byte): Byte =
  let c = 0b in
  let c1 = if (or(a >=& 128b, b >=& 128b)) {
    c +& 128b
  } else {
    c
  } in
  let a1 = a +& a in
  let b1 = b +& b in
  let c2 = if (or(a1 >=& 128b, b1 >=& 128b)) {
    c1 +& 64b
  } else {
    c1
  } in
  let a2 = a1 +& a1 in
  let b2 = b1 +& b1 in
  let c3 = if (or(a2 >=& 128b, b2 >=& 128b)) {
    c2 +& 32b
  } else {
    c2
  } in
  let a3 = a2 +& a2 in
  let b3 = b2 +& b2 in
  let c4 = if (or(a3 >=& 128b, b3 >=& 128b)) {
    c3 +& 16b
  } else {
    c3
  } in
  let a4 = a3 +& a3 in
  let b4 = b3 +& b3 in
  let c5 = if (or(a4 >=& 128b, b4 >=& 128b)) {
    c4 +& 8b
  } else {
    c4
  } in
  let a5 = a4 +& a4 in
  let b5 = b4 +& b4 in
  let c6 = if (or(a5 >=& 128b, b5 >=& 128b)) {
    c5 +& 4b
  } else {
    c5
  } in
  let a6 = a5 +& a5 in
  let b6 = b5 +& b5 in
  let c7 = if (or(a6 >=& 128b, b6 >=& 128b)) {
    c6 +& 2b
  } else {
    c6
  } in
  let a7 = a6 +& a6 in
  let b7 = b6 +& b6 in
  let c8 = if (or(a7 >=& 128b, b7 >=& 128b)) {
    c7 +& 1b
  } else {
    c7
  } in
  c8
