pub max_int: Int = 2305843009213693951

pub cmp_max(a: Int, b: Int): Int =
  if a > b {
    a
  } else {
    b
  }

pub cmp_min(a: Int, b: Int): Int =
  if a < b {
    a
  } else {
    b
  }

pub int_bit_not(a: Int): Int =
  -a - 1

pub rem(a: Int, b: Int): Int =
  a - b * (a / b)

pub mod(a: Int, b: Int): Int =
  if a < 0 {
    rem(a, b) + b
  } else {
    rem(a, b)
  }

pow_rec(accum: Int, a: Int, b: Int): Int =
  if (b = 0) {
    accum
  } else {
    pow_rec(a * accum, a, b - 1)
  }

pub pow(a: Int, b: Int): Int =
  pow_rec(1, a, b)

byte_pow_rec(accum: Byte, a: Byte, b: Byte): Byte =
  if (b =& 0b) {
    accum
  } else {
    byte_pow_rec(a *& accum, a, b -& 1b)
  }

pub byte_pow(a: Byte, b: Byte): Byte =
  byte_pow_rec(1b, a, b)

pub float_pow(base: Float, exp: Int): Float =
  if exp = 0 {
    1.0
  } else if exp < 0 {
    1.0 /. float_pow(base, -exp)
  } else if int_bit_and(exp, 1) = 0 {
    float_pow(base *. base, int_shift_right(exp, 1))
  } else {
    base *. float_pow(base *. base, int_shift_right(exp, 1))
  }

int_to_float_rec(accum: Float, n: Int): Float =
  if n = 0 {
    accum
  } else if int_bit_and(n, 1) = 0 {
    int_to_float_rec(accum *. 2.0, int_shift_right(n, 1))
  } else {
    int_to_float_rec(accum *. 2.0 +. 1.0, int_shift_right(n, 1))
  }

// TODO: This needs to be an intrinsic!
pub int_to_float(n: Int): Float =
  if n < 0 {
    -.int_to_float_rec(0.0, -n)
  } else {
    int_to_float_rec(0.0, n)
  }
