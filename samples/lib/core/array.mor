import Iter expose { Iter }

get(arr: Array a, i: Int): a =
  let (x, _) = item(arr, i) in
  x

set(arr: Array a, i: Int, val: a): Array a =
  let (_, hole) = item(arr, i) in
  hole(val)

update(arr: Array a, i: Int, f: a -> a): Array a =
  let (x, hole) = item(arr, i) in
  hole(f(x))

concat_from(a: Array t, b: Array t, i: Int): Array t =
  if i = len(b) {
    a
  } else {
    concat_from(push(a, get(b, i)), b, i + 1)
  }

concat(a: Array t, b: Array t): Array t =
  concat_from(a, b, 0)

fill_with_rec(arr: Array t, count: Int, mk_val: () -> t): Array t =
  if count > 0 {
    fill_with_rec(push(arr, mk_val()), count - 1, mk_val)
  } else {
    arr
  }

fill_with(count: Int, mk_val: () -> t): Array t =
  fill_with_rec([], count, mk_val)

fill(count: Int, val: t): Array t =
  fill_with(count, \() -> val)

from_iter(iter: Iter a): Array a =
  Iter.foldr(iter, [], \(x, arr) -> push(arr, x))
