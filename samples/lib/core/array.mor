import Iter expose { Iter }
import Option expose { Option { Some, None } }

// TODO: This is a temporary workaround.  We should have a namespacing system for builtins.
module NoShadow = {
  pub get_: (Array a, Int) -> a = get
  pub len_: Array a -> Int = len
  pub push_: (Array a, a) -> Array a = push
}

pub get: (Array a, Int) -> a = NoShadow.get_
pub len: Array a -> Int = NoShadow.len_
pub push: (Array a, a) -> Array a = NoShadow.push_

pub set(arr: Array a, i: Int, val: a): Array a =
  let (_, hole) = extract(arr, i) in
  hole(val)

pub update(arr: Array a, i: Int, f: a -> a): Array a =
  let (x, hole) = extract(arr, i) in
  hole(f(x))

pub try_get(arr: Array a, i: Int): Option a =
  if i >= 0 && i < len(arr) {
    Some(get(arr, i))
  } else {
    None
  }

concat_from(a: Array t, b: Array t, i: Int): Array t =
  if i = len(b) {
    a
  } else {
    concat_from(push(a, get(b, i)), b, i + 1)
  }

pub concat(a: Array t, b: Array t): Array t =
  concat_from(a, b, 0)

find_index_rec(arr: Array t, p: t -> Bool, i: Int): Option Int =
  if i >= len(arr) {
    None
  } else if p(get(arr, i)) {
    Some(i)
  } else {
    find_index_rec(arr, p, i + 1)
  }

pub find_index(arr: Array t, p: t -> Bool):  Option Int =
  find_index_rec(arr, p, 0)

all_rec(arr: Array a, f: a -> Bool, i: Int): Bool =
  if i >= len(arr) {
    True
  } else if !f(get(arr, i)) {
    False
  } else {
    all_rec(arr, f, i + 1)
  }

pub all(arr: Array a, f: a -> Bool): Bool =
  all_rec(arr, f, 0)

foldl_rec(arr: Array t, accum: u, f: (u, t) -> u, i: Int): u =
  if i >= len(arr) {
    accum
  } else {
    foldl_rec(arr, f(accum, get(arr, i)), f, i + 1)
  }

pub foldl(arr: Array t, accum: accum, f: (accum, t) -> accum): accum =
  foldl_rec(arr, accum, f, 0)

map_rec(arr: Array t, f: t -> u, i: Int): Array u =
  if i < 0 {
    []
  } else {
    push(map_rec(arr, f, i - 1), f(get(arr, i)))
  }

pub is_empty(arr: Array a): Bool = len(arr) = 0

pub map(arr: Array t, f: t -> u): Array u =
  map_rec(arr, f, len(arr) - 1)

slice_rec(arr: Array t, start: Int, end: Int, i: Int): Array t =
  if i < start {
    []
  } else {
    push(slice_rec(arr, start, end, i - 1), get(arr, i))
  }

pub slice(arr: Array t, start: Int, end: Int): Array t =
  if start < 0 || end < 0 || start >= len(arr) || end > len(arr) || end <= start {
    []
  } else {
    slice_rec(arr, start, end, end - 1)
  }

zip_rec(a: Array t, b: Array u, i: Int): Array (t, u) =
  if i < 0 {
    []
  } else {
    push(zip_rec(a, b, i - 1), (get(a, i), get(b, i)))
  }

pub zip(a: Array t, b: Array u): Array (t, u) =
  let start = if len(a) < len(b) { len(a) } else { len(b) } - 1 in
  if start < 0 {
    []
  } else {
    zip_rec(a, b, start)
  }

pub push_front(val: t, arr: Array t): Array t =
  concat([val], arr)


equal_rec(arr1: Array a, arr2: Array a, eq: (a, a) -> Bool, i: Int): Bool =
  if i >= len(arr1) {
    True
  } else if i >= len(arr2) {
    False
  } else if !eq(get(arr1, i), get(arr2, i)) {
    False
  } else {
    equal_rec(arr1, arr2, eq, i + 1)
  }

pub equal(arr1: Array a, arr2: Array a, eq: (a, a) -> Bool): Bool =
  if !(len(arr1) = len(arr2)) {
    False
  } else {
    equal_rec(arr1, arr2, eq, 0)
  }

fill_with_rec(arr: Array t, count: Int, mk_val: () -> t): Array t =
  if count > 0 {
    fill_with_rec(push(arr, mk_val()), count - 1, mk_val)
  } else {
    arr
  }

pub fill_with(count: Int, mk_val: () -> t): Array t =
  fill_with_rec(reserve([], count), count, mk_val)

pub fill(count: Int, val: t): Array t =
  fill_with(count, \() -> val)

pub from_iter_with_capacity(iter: Iter a, capacity: Int): Array a =
  Iter.foldl(iter, reserve([], capacity), push)

pub from_iter(iter: Iter a): Array a =
  from_iter_with_capacity(iter, 0)

reverse_rec(arr: Array t, i: Int, result: Array t): Array t =
  if i < 0 {
    result
  } else {
    reverse_rec(arr, i - 1, push(result, get(arr, i)))
  }

pub reverse(arr: Array t): Array t =
  reverse_rec(arr, len(arr) - 1, [])


pub str(arr: Array a, s: a -> Array Byte): Array Byte =
  let n = len(arr) - 1 in
  Iter.items(arr)
    |> Iter.take(n)
    |> Iter.foldl(
        "[",
        \(accum, item) -> accum
          |> concat(s(item))
          |> concat(", ")
    )
    |> concat(s(get(arr, n)))
    |> concat("]")
