// based off https://github.com/koka-lang/koka/blob/b3122869ac74bfb6f432f7e76eeb723b1f69a491/test/bench/koka/rbtree-ck.kk

module Core = file "lib/core/core.mor"
  expose {
    module Io expose { writeln },
    module String expose { int_to_string },
  }

type Color {
  Red,
  Black,
}

type Tree {
  Leaf,
  Node(Color, Tree, Int, Bool, Tree),
}

fold(t: Tree, b: a, f: (Int, Bool, a) -> a): a =
  match t {
    Leaf -> b,
    Node(_, l, k, v, r) -> fold(r, f(k, v, fold(l, b, f)), f)
  }

balance1(kv: Int, vv: Bool, t: Tree, s: Tree): Tree =
  match s {
    Leaf -> Leaf,
    Node(_, Node(Red, l, kx, vx, r1), ky, vy, r2)
      -> Node(Red, Node(Black, l, kx, vx, r1), ky, vy, Node(Black, r2, kv, vv, t)),
    Node(_, l1, ky, vy, Node(Red, l2, kx, vx, r))
      -> Node(Red, Node(Black, l1, ky, vy, l2), kx, vx, Node(Black, r, kv, vv, t)),
    Node(_, l, ky, vy, r)
      -> Node(Black, Node(Red, l, ky, vy, r), kv, vv, t),
  }

balance2(t: Tree, kv: Int, vv: Bool, s: Tree): Tree =
  match s {
    Leaf -> Leaf,
    Node(_, Node(Red, l, kx1, vx1, r1), ky, vy, r2)
      -> Node(Red, Node(Black, t, kv, vv, l), kx1, vx1, Node(Black, r1, ky, vy, r2)),
    Node(_, l1, ky, vy, Node(Red, l2, kx2, vx2, r2))
      -> Node(Red, Node(Black, t, kv, vv, l1), ky, vy, Node(Black, l2, kx2, vx2, r2)),
    Node(_, l, ky, vy, r)
      -> Node(Black, t, kv, vv, Node(Red, l, ky, vy, r)),
  }

is_red(t : Tree) : Bool =
  match t {
    Node(Red, _, _, _, _) -> True,
    _         -> False,
  }

ins(t: Tree, kx: Int, vx: Bool): Tree =
  match t {
    Leaf
      -> Node(Red, Leaf, kx, vx, Leaf),
    Node(Red, a, ky, vy, b)
      -> if kx < ky { Node(Red, ins(a, kx, vx), ky, vy, b) }
         else if kx = ky { Node(Red, a, kx, vx, b) }
         else { Node(Red, a, ky, vy, ins(b, kx, vx)) },
    Node(Black, a, ky, vy, b)
      -> if kx < ky { if is_red(a) { balance1(ky, vy, b, ins(a, kx, vx)) }
                                       else { Node(Black, ins(a, kx, vx), ky, vy, b) } }
         else if kx = ky { Node(Black, a, kx, vx, b) }
         else if is_red(b) { balance2(a, ky, vy, ins(b, kx, vx)) }
         else { Node(Black, a, ky, vy, ins(b, kx, vx)) },
  }

set_black(t: Tree ) : Tree =
  match t {
    Node(_, l, k, v, r) -> Node(Black, l, k, v, r),
    _ -> t,
  }


insert(t: Tree, k: Int, v: Bool): Tree =
  if is_red(t) {
    set_black(ins(t, k, v))
  } else {
    ins(t, k, v)
  }

mod(a: Int, b: Int): Int =
  a - b * (a / b)


// the following three functions are rbtree
make_tree_aux(n: Int, t: Tree) : Tree =
  if n <= 0 { t } else {
    let n1 = n - 1 in
    make_tree_aux(n1, insert(t, n1, mod(n1, 10) = 0))
  }

make_tree(n : Int) : Tree =
  make_tree_aux(n, Leaf)

proc main(): () =
  let n = 4200000 in
  let t = make_tree(n) in
  let v = fold(t, 0, \(k,v,r) -> if v { r + 1 } else { r }) in
  do output(int_to_string(v))

// this is rbtree-ck
// make_tree_aux(freq : Int, n: Int, t: Tree, acc : Array Tree): Array Tree=
//   if n <= 0 { push(acc, t) } else {
//     let t_ = insert(t, n, mod(n, 10) = 0) in
//     make_tree_aux(freq, n - 1, t_, if (mod(n, freq)=0) { push(acc, t_) } else { acc })
//   }
//
// make_tree(freq : Int, n: Int): Array Tree =
//   make_tree_aux(freq, n, Leaf, [])
// proc main(): () =
//   let trees = make_tree(5,4200000) in
//   let v = fold(get(trees, len(trees) - 1), 0, \(k,v,r) -> if (v) { r + 1 } else { r }) in
//   do output(int_to_string(v))
