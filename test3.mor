type Expr {
  Var(Int),
  Val(Int),
  Add(Expr, Expr),
  Mul(Expr, Expr),
}

append_add(e0: Expr, e3: Expr): Expr =
  match e0 {
    Add(e1,e2) -> Add(e1, append_add(e2, e3)),
    _          -> Add(e0, e3),
  }

append_mul(e0: Expr, e3: Expr): Expr =
  match e0 {
    Mul(e1,e2) -> Mul(e1, append_mul(e2, e3)),
    _          -> Mul(e0, e3),
  }

reassoc(e: Expr): Expr =
  match e {
    Add(e1,e2) -> append_add(reassoc(e1), reassoc(e2)),
    Mul(e1,e2) -> append_mul(reassoc(e1), reassoc(e2)),
    _ -> e,
  }

proc main(): () =
  let _ = reassoc(Add(Val(1), Val(1))) in
  do output("Completed all tests\n")
